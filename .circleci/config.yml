version: 2.1
orbs:
  aws-s3: circleci/aws-s3@2.0.0

executors:
  python:
    docker:
      - image: circleci/python:2-node

aliases:
  - &generate-lock-file
      run:
        name: Generate lock file
        command: yarn generate-lock-entry >> yarn.lock

  - &restore-cache
      restore_cache:
        keys:
          - build-cache-{{ checksum "yarn.lock" }}

  - &save-cache
      save_cache:
        paths:
          - node_modules
          - build
        key: build-cache-{{ checksum "yarn.lock" }}

commands:

  node-build-steps:
    steps:
      - checkout:
          path: ~/project
      # Services and packages in a Workspace don't get their own
      # yarn.lock so we need to generate them manually.
      - *generate-lock-file
      - *restore-cache
      - run:
          name: Build
          command: |
            yarn
            yarn build
            rm -rf src
      - *save-cache

  node-test-steps:
    steps:
      - checkout:
          path: ~/project
      - *generate-lock-file
      - *restore-cache
      - run:
          name: Test
          command: |
            yarn
            yarn test

  deploy-s3:
    steps:
      - checkout:
          path: ~/project
      - *generate-lock-file
      - *restore-cache
      - aws-s3/sync:
          from: ~/project/packages/app/build
          to: "s3://zsalab.com"
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400" \
            --exclude ".git/*" \
            --exclude ".gitignore" \
            --exclude ".circleci/*" \


jobs:
  build-app:
    working_directory: /home/circleci/project/packages/app
    executor: python
    steps:
      - node-build-steps

  test-app:
    working_directory: /home/circleci/project/packages/app
    executor: python
    steps:
      - node-test-steps

  deployS3-app:
    working_directory: /home/circleci/project/packages/app
    executor: python
    steps:
      - deploy-s3

workflows:
  version: 2

  deploy:
    jobs:
      - build-app
      - test-app:
          requires:
            - build-app
      - deployS3-app:
          requires:
            - test-app
          context: aws
          filters:
            branches:
              only: main
